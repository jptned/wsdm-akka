akka {

  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  actor {
    provider = cluster

    serializers {
        user-type = "microservice.types.UserSerializer"
        stock-type = "microservice.types.StockSerializer"
    }

    serialization-bindings {
        "microservice.types.UserType" = user-type
        "microservice.types.StockType" = stock-type
        "microservice.CborSerializable" = jackson-cbor
    }
  }

  persistence.journal.plugin = "akka.persistence.journal.leveldb"
  persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s

    distributed-data.durable {
        keys = ["*"]
        lmdb.write-behind-interval = 200 ms
        lmdb.dir = "storage"
    }
  }

  coordinated-shutdown.exit-jvm = on

  sharding {
    //      number-of-shards = 100
    remember-entities = on
  }
}

akka.management {
    cluster.bootstrap {
        contact-point-discovery {
            discovery-method = kubernetes-api
        }
    }
    health-checks {
        readiness-checks {
            example-ready = "microservice.HealthCheck"
        }
    }
}