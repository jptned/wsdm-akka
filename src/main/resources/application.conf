akka {

  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  actor {
    provider = cluster

    serializers {
        user-type = "microservice.types.UserSerializer"
        stock-type = "microservice.types.StockSerializer"
    }

    serialization-bindings {
        "microservice.types.UserType" = user-type
        "microservice.types.StockType" = stock-type
        "microservice.CborSerializable" = jackson-cbor
    }
    allow-java-serialization = on
    warn-about-java-serializer-usage = off
  }

   persistence {
     journal.plugin = "akka-contrib-mongodb-persistence-journal"
     snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"
   }

  
  contrib.persistence.mongodb.mongo.mongouri = ${MONGO_CONNECTION_STR}

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    
    sharding {
        # remember-entities = on
        # distributed-data.durable.keys = []
        number-of-shards = 1000
    }
  }

  coordinated-shutdown.exit-jvm = on
}

akka.management {
    cluster.bootstrap {
        contact-point-discovery {
            discovery-method = kubernetes-api
        }
    }
    health-checks {
        readiness-checks {
            example-ready = "microservice.HealthCheck"
        }
    }
}